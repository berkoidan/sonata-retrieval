from io import TextIOWrapper
from typing import Generator, Iterator
import mido

class MidiFile:
    filename: str
    type: int
    ticks_per_beat: int    
    tracks: list[MidiTrack]
    def __init__(self, filename: str | None = None, file: TextIOWrapper | None = None, type: int = 1, ticks_per_beat:int=0, charset: str = 'latin1', debug: bool = False, clip: bool = False, tracks: list[MidiTrack] | None = None) -> None: ...
    @property
    def merged_track(self) -> MidiTrack: ...
    def add_track(self, name: str | None = None) -> MidiTrack: ...
    @property
    def length(self) -> int: ...
    def __iter__(self) -> Iterator[MidiTrack]: ...
    def play(self, meta_messages: bool = False, now:int=0) -> Generator[MidiMessage, None, None]: ...
    def save(self, filename: str | None = None, file: TextIOWrapper | None = None) -> None: ...
    def print_tracks(self, meta_only: bool = False) -> None: ...

class MidiTrack(list[MidiMessage]):
    def copy(self) -> MidiTrack: ...    

def fix_end_of_track(messages:list[MidiMessage], skip_checks: bool = False) -> Generator[MidiMessage, None, None]: ...
def merge_tracks(tracks:list[MidiTrack], skip_checks: bool = False) -> MidiTrack: ...

class MessageBase():
    def __init__(self, type:str, time:int): ...
    is_meta:bool
    type:str
    time:int
    channel:int
    velocity:int
    note:int
    pitch:int
    numerator:int
    denominator:int
    
class Message(MessageBase): ...
class MetaMessage(MessageBase): ...    

MidiMessage = mido.MetaMessage | mido.Message